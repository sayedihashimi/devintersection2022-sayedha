@using MyBlazorWasmWithAuth.Pages
@using static MyBlazorWasmWithAuth.Pages.FetchData
@inject HttpClient Http

@if (WeatherData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>State:
    <select @onchange="OnStateChanged" disabled="@IsLoading">
        @if(States != null) {
            @foreach(var state in States) {
                <option value="@state" selected="@(string.Equals(state,CurrentState))">@state</option>
            }
        }
    </select>
    City:
    <select @onchange="OnCityChanged" disabled="@IsLoading">
            @if(Cities != null) {
                @foreach(var city in Cities) {
                    <option value="@city" selected="@(string.Equals(city,CurrentCity))">@city</option>
                }
            }
        </select>
    </p>
    <table id="forecastTable" class="table" isLoading="@IsLoading">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. min (F)</th>
                <th>Temp. max (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @if(WeatherData != null && WeatherData.Forecasts != null && WeatherData.Forecasts.Count > 0) {
                foreach (var forecast in WeatherData.Forecasts)
                {
                    <tr>
                        <td>@GetDateStringFor(@forecast.DateInt)</td>
                        <td>@forecast.Temp!.MinF &#176;</td>
                        <td>@forecast.Temp!.MaxF &#176;</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    public WeatherData? WeatherData{ get; set; }

    public List<string>? States{ get; set; }
    public List<string>? Cities{ get; set; }

    public string CurrentState { get; set; } = "NV";
    public string CurrentCity { get; set; } = "Las Vegas";
    private LocationInfo[]? locations{ get; set; }
    public decimal latitude{ get; set; }
    public decimal longitude{ get; set; }

    private bool _isLoading;
    public bool IsLoading{
        get {
            return _isLoading;
        }
        set {
            _isLoading = value;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        locations = await Http.GetFromJsonAsync<LocationInfo[]>(@"uscities.json");
        PopulateStates();
        PopulateCities();
        CurrentState = "NV";
        CurrentCity = "Las Vegas";
        await UpdateWeather();
        IsLoading = false;
    }

    void OnStateChanged(ChangeEventArgs e)
    {
        CurrentState = e.Value!.ToString()!;
        PopulateCities();
    }
    async Task OnCityChanged(ChangeEventArgs e)
    {
        CurrentCity = e.Value!.ToString()!;
        GetLatLongFor(CurrentState,CurrentCity);
        await UpdateWeather();
    }
    void PopulateStates()
    {
        States = locations!.Select(x => x.StateId).Distinct().ToList();
        States.Sort();
    }
    void PopulateCities()
    {
        if (!string.IsNullOrEmpty(CurrentState) && locations?.Length>0) {
            Cities = locations!.Where(x => x.StateId == CurrentState).Select(x => x.City).Distinct().ToList();
            Cities.Sort();
            CurrentCity = Cities[0];
        }
    }
    void GetLatLongFor(string stateId,string city)
    {
        try {
            var item = locations!.Where(loc => loc.StateId == stateId && loc.City == city).First();
            if (item != null) {
                Console.WriteLine($"lat:{item.Latitude} long:{item.Longitude}");
                latitude = item.Latitude;
                longitude = item.Longitude;
            }
        }
        catch(Exception ex) {
            Console.WriteLine($"unable to get lat/long. Error: {ex}");
        }
    }
    async Task UpdateWeather()
    {
        IsLoading = true;
        GetLatLongFor(CurrentState, CurrentCity);
        Console.WriteLine($"weather url: https://www.7timer.info/bin/api.pl?lon={longitude}&lat={latitude}&product=civillight&output=json");        
        WeatherData = await Http.GetFromJsonAsync<WeatherData>(@$"https://www.7timer.info/bin/api.pl?lon={longitude}&lat={latitude}&product=civillight&output=json");
        IsLoading = false;
    }

    private string GetDateStringFor(int dateInt) =>
        DateTime.ParseExact(dateInt.ToString(), "yyyyMMdd", null).ToShortDateString();
}
