@using MyBlazorWasmWithAuth.Pages
@using static MyBlazorWasmWithAuth.Pages.FetchData
@inject HttpClient Http
@*<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in Forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
    </tbody>
</table>*@
<p>State:
<select @onchange="OnStateChanged">
    @if(States != null){
        @foreach(var state in States) {
            <option value="@state" selected=@(string.Equals(state,CurrentState))>@state</option>
        }
    }
</select>
City:
<select @onchange="OnCityChanged">
        @if(Cities != null) {
            @foreach(var city in Cities) {
                <option value="@city" selected=@(string.Equals(city,CurrentCity))>@city</option>
            }
        }
    </select>
</p>
<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. min (F)</th>
            <th>Temp. max (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @if(WeatherData != null && WeatherData.Forecasts != null && WeatherData.Forecasts.Count > 0) {
            foreach (var forecast in WeatherData.Forecasts)
            {
                <tr>
                    <td>@DateTime.ParseExact(@forecast.DateInt.ToString(),"yyyyMMdd",null).ToShortDateString()</td>
                    <td>@forecast.Temp.MinF &#176;</td>
                    <td>@forecast.Temp.MaxF &#176;</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        }
    </tbody>
</table>


@code {
    [Parameter]
    public WeatherForecast[] Forecasts{ get; set; }

    public WeatherData WeatherData{ get; set; }

    public List<string>States{ get; set; }
    public List<string>Cities{ get; set; }

    public string CurrentState { get; set; } = "NV";
    public string CurrentCity { get; set; } = "Las Vegas";
    private LocationInfo[]locations{ get; set; }
    public decimal latitude{ get; set; }
    public decimal longitude{ get; set; }

    private bool firstRender = true;
    protected override async Task OnInitializedAsync()
    {
        locations = await Http.GetFromJsonAsync<LocationInfo[]>(@"uscities.json");
        States = locations!.Select(x => x.StateId).Distinct().ToList();
        States.Sort();
        PopulateCities();
        CurrentState = "NV";
        CurrentCity = "Las Vegas";
        GetLatLongFor(CurrentState, CurrentCity);
        //latitude = 36.16m;
        //longitude = 115.13m;
        firstRender = false;
        await UpdateWeather();
    }

    void OnStateChanged(ChangeEventArgs e)
    {
        if (firstRender) return;
        CurrentState = e.Value!.ToString()!;
        Console.WriteLine($"DoStuff called, currentstate={CurrentState}");
        PopulateCities();
    }
    async Task OnCityChanged(ChangeEventArgs e)
    {
        if (firstRender) return;
        CurrentCity = e.Value!.ToString()!;
        Console.WriteLine($"set currentcity: {CurrentCity}");
        GetLatLongFor(CurrentState,CurrentCity);
        await UpdateWeather();
    }
    void PopulateCities()
    {
        if (!string.IsNullOrEmpty(CurrentState) && locations != null && locations.Length>0) {
            Console.WriteLine($"updating city, currentstate={CurrentState}");
            Cities = locations!.Where(x => x.StateId == CurrentState).Select(x => x.City).Distinct().ToList();
            Cities.Sort();
            if (!firstRender) {
                CurrentCity = Cities[0];
            }
        }
    }
    void GetLatLongFor(string stateId,string city)
    {
        Console.WriteLine($"getlatlong for: state='{stateId}',city='{city}'");
        try {
            var item = locations!.Where(loc => loc.StateId == stateId && loc.City == city).First();
            if (item != null) {
                Console.WriteLine($"lat:{item.Latitude} long:{item.Longitude}");
                latitude = item.Latitude;
                longitude = item.Longitude;
            }
        }
        catch(Exception ex) {
            Console.WriteLine($"unable to get lat/long. Error: {ex}");
        }
    }
    async Task UpdateWeather()
    {
        Console.WriteLine($"weather url: https://www.7timer.info/bin/api.pl?lon={longitude}&lat={latitude}&product=civillight&output=json");
        WeatherData = await Http.GetFromJsonAsync<WeatherData>(@$"https://www.7timer.info/bin/api.pl?lon={longitude}&lat={latitude}&product=civillight&output=json");
        GetLatLongFor(CurrentState, CurrentCity);
        StateHasChanged();
    }
}
